#include <iostream>
#include <algorithm>
using namespace std;


// 5개 테트리스 중 1개를 놓음. 
// 블럭 놓인 칸 안에 적힌 수의 합의 최대값 출력
// 테트리스는 회전, 뒤집기 가능하다. 

int n,m;
int board[201][201];
int tmp[5][201][201]; 
int blocks[19][4][4] =  { { {1, 1, 1, 1},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 0, 0, 0},
                            {1, 0, 0, 0},
                            {1, 0, 0, 0},
                            {1, 0, 0, 0} },

                          { {1, 1, 0, 0},
                            {1, 1, 0, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 0, 0, 0},
                            {1, 0, 0, 0},
                            {1, 1, 0, 0},
                            {0, 0, 0, 0} },

                          { {0, 1, 0, 0},
                            {0, 1, 0, 0},
                            {1, 1, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 1, 1, 0},
                            {1, 0, 0, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 1, 1, 0},
                            {0, 0, 1, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 1, 0, 0},
                            {0, 1, 0, 0},
                            {0, 1, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 1, 0, 0},
                            {1, 0, 0, 0},
                            {1, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {0, 0, 1, 0},
                            {1, 1, 1, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 0, 0, 0},
                            {1, 1, 1, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 0, 0, 0},
                            {1, 1, 0, 0},
                            {0, 1, 0, 0},
                            {0, 0, 0, 0} },

                          { {0, 1, 1, 0},
                            {1, 1, 0, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 1, 0, 0},
                            {0, 1, 1, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {0, 1, 0, 0},
                            {1, 1, 0, 0},
                            {1, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 0, 0, 0},
                            {1, 1, 0, 0},
                            {1, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {1, 1, 1, 0},
                            {0, 1, 0, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} },

                          { {0, 1, 0, 0},
                            {1, 1, 0, 0},
                            {0, 1, 0, 0},
                            {0, 0, 0, 0} },

                          { {0, 1, 0, 0},
                            {1, 1, 1, 0},
                            {0, 0, 0, 0},
                            {0, 0, 0, 0} } };


// tet[0][5][5] -> 첫번째 테트리스 관련 내용
// 즉 첫번째 인덱스의 변화에 따라서 테트리스 값을 갖고 있도록 함. 


int findMax(int x, int y){
    int maxSum = 0;
    for (int i=0; i<19; i++){ //블럭 모양 결정하는 반복문. 
        int sum = 0;
        for (int dx = 0; dx < 4; dx ++){
            for (int dy = 0; dy <4; dy++){
                int nx = x + dx;
                int ny = y + dy;
            if (nx < 0 || ny < 0 || nx >=n || ny >= m ) continue; 
            if (!blocks[i][dx][dy]) continue;
            sum = sum+board[nx][ny]; 
            }
        }
        maxSum = max(maxSum, sum); 
    }
        return maxSum;
    }



int main() {
    cin >> n >> m;
    for (int i=0; i<n; i++){
        for (int j=0; j<m; j++){
            cin >> board[i][j];
        }
    }

    int ans = 0;

    for (int i=0; i<n; i++){
        for (int j=0; j<m; j++){
            ans = max(ans, findMax(i,j));
        }
    }
    cout << ans;
    return 0;
}